// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: main.proto

package testecho

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestEcho_Echo_FullMethodName = "/testecho.TestEcho/Echo"
	TestEcho_Feed_FullMethodName = "/testecho.TestEcho/Feed"
)

// TestEchoClient is the client API for TestEcho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestEchoClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Feed(ctx context.Context, opts ...grpc.CallOption) (TestEcho_FeedClient, error)
}

type testEchoClient struct {
	cc grpc.ClientConnInterface
}

func NewTestEchoClient(cc grpc.ClientConnInterface) TestEchoClient {
	return &testEchoClient{cc}
}

func (c *testEchoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, TestEcho_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testEchoClient) Feed(ctx context.Context, opts ...grpc.CallOption) (TestEcho_FeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestEcho_ServiceDesc.Streams[0], TestEcho_Feed_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testEchoFeedClient{stream}
	return x, nil
}

type TestEcho_FeedClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type testEchoFeedClient struct {
	grpc.ClientStream
}

func (x *testEchoFeedClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testEchoFeedClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestEchoServer is the server API for TestEcho service.
// All implementations must embed UnimplementedTestEchoServer
// for forward compatibility
type TestEchoServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	Feed(TestEcho_FeedServer) error
	mustEmbedUnimplementedTestEchoServer()
}

// UnimplementedTestEchoServer must be embedded to have forward compatible implementations.
type UnimplementedTestEchoServer struct {
}

func (UnimplementedTestEchoServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedTestEchoServer) Feed(TestEcho_FeedServer) error {
	return status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedTestEchoServer) mustEmbedUnimplementedTestEchoServer() {}

// UnsafeTestEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestEchoServer will
// result in compilation errors.
type UnsafeTestEchoServer interface {
	mustEmbedUnimplementedTestEchoServer()
}

func RegisterTestEchoServer(s grpc.ServiceRegistrar, srv TestEchoServer) {
	s.RegisterService(&TestEcho_ServiceDesc, srv)
}

func _TestEcho_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestEchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestEcho_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestEchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestEcho_Feed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestEchoServer).Feed(&testEchoFeedServer{stream})
}

type TestEcho_FeedServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type testEchoFeedServer struct {
	grpc.ServerStream
}

func (x *testEchoFeedServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testEchoFeedServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestEcho_ServiceDesc is the grpc.ServiceDesc for TestEcho service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestEcho_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testecho.TestEcho",
	HandlerType: (*TestEchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TestEcho_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Feed",
			Handler:       _TestEcho_Feed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}
